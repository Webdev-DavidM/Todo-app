{"version":3,"sources":["components/AddToDo.js","components/ToDoItem.js","components/TodoList.js","App.js","index.js"],"names":["AddToDo","addToDo","useState","buttonClicked","setButtonClicked","name","useRef","buttonShowBackground","className","onClick","current","value","src","process","alt","htmlFor","ref","type","placeholder","TodoItem","todo","completed","remove","crossed","id","TodoList","todos","markCompleted","removeToDo","clearComplete","toDoToDisplay","setDoTodisplay","button","setButton","useEffect","filter","prevTodo","setTimeout","prevTodos","TransitionGroup","map","crossedOff","CSSTransition","timeout","classNames","length","style","color","App","setTodos","displayNight","setDisplay","backgroundColor","srcset","media","srcSet","oldDisplay","xmlns","width","height","fill","fillRule","d","uuid","newArrayWithCompletedItems","items","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb369a46.chunk.js","sourcesContent":["import React, { useRef, useState } from 'react';\n\nexport default function AddToDo({ addToDo }) {\n  let [buttonClicked, setButtonClicked] = useState(false);\n\n  let name = useRef();\n\n  const toDoButtonClicked = () => {\n    setButtonClicked(true);\n    addToDo(name.current.value);\n    name.current.value = '';\n    setButtonClicked(false);\n  };\n\n  const buttonShowBackground = buttonClicked\n    ? 'circle-check button-pressed'\n    : 'circle-check';\n\n  return (\n    <div className='add-todo-container'>\n      <button onClick={toDoButtonClicked} className={buttonShowBackground}>\n        {buttonClicked && (\n          <img src={`${process.env.PUBLIC_URL}/images/icon-check.svg`} alt='' />\n        )}\n      </button>\n\n      <label htmlFor=''></label>\n      <input ref={name} type='text' placeholder='Create a new todo....' />\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function TodoItem({\n  todo,\n  buttonShowBackground,\n  completed,\n  remove,\n  crossed,\n}) {\n  return (\n    <li className='todo-item-container' key={todo.id}>\n      <button\n        onClick={() => completed(todo.id)}\n        className={buttonShowBackground}>\n        {' '}\n        {todo.completed && (\n          <img\n            src={`${process.env.PUBLIC_URL}/images/icon-check.svg`}\n            alt='background day'\n          />\n        )}\n      </button>\n      <span className={crossed}>{todo.name}</span>\n      <button onClick={() => remove(todo.id)}>\n        <img\n          src={`${process.env.PUBLIC_URL}/images/icon-cross.svg`}\n          alt={'background night'}></img>\n      </button>\n    </li>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport '../App.scss';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport ToDoItem from './ToDoItem';\n\nexport default function TodoList({\n  todos,\n  markCompleted,\n  removeToDo,\n  clearComplete,\n}) {\n  const [toDoToDisplay, setDoTodisplay] = useState([]);\n  const [button, setButton] = useState('all');\n\n  useEffect(() => {\n    setDoTodisplay(todos);\n  }, [todos]);\n\n  const filter = (filter) => {\n    if (filter === 'all') {\n      setDoTodisplay((prevTodo) => [...todos]);\n      setButton('all');\n    }\n    if (filter === 'active') {\n      setDoTodisplay((prevTodo) => [...todos]);\n      setTimeout(() => {\n        setDoTodisplay((prevTodos) => [\n          ...todos.filter((todo) => todo.completed === false),\n        ]);\n      }, 300);\n\n      setButton('active');\n    }\n    if (filter === 'completed') {\n      setDoTodisplay((prevTodo) => [...todos]);\n      setTimeout(() => {\n        setDoTodisplay((prevTodos) => [\n          ...todos.filter((todo) => todo.completed === true),\n        ]);\n      }, 300);\n\n      setButton('completed');\n    }\n  };\n\n  return (\n    <TransitionGroup className='todo-container'>\n      {toDoToDisplay.map((todo) => {\n        const buttonShowBackground = todo.completed\n          ? 'circle-check button-pressed'\n          : 'circle-check';\n        const crossedOff = todo.completed ? 'crossed-off' : '';\n\n        return (\n          <CSSTransition key={todo.id} timeout={300} classNames='item'>\n            <ToDoItem\n              todo={todo}\n              buttonShowBackground={buttonShowBackground}\n              completed={markCompleted}\n              remove={removeToDo}\n              crossed={crossedOff}\n            />\n          </CSSTransition>\n        );\n      })}\n\n      <div className='controls-flex-container'>\n        <span>{todos.length} items left</span>\n        <button\n          onClick={() => {\n            setButton('all');\n            clearComplete();\n          }}>\n          Clear Completed\n        </button>\n        <div className='section-container'>\n          <button\n            style={button === 'all' ? { color: 'hsl(220, 98%, 61%)' } : null}\n            onClick={() => filter('all')}>\n            All\n          </button>\n          <button\n            style={button === 'active' ? { color: 'hsl(220, 98%, 61%)' } : null}\n            onClick={() => filter('active')}>\n            Active\n          </button>\n          <button\n            style={\n              button === 'completed' ? { color: 'hsl(220, 98%, 61%)' } : null\n            }\n            onClick={() => filter('completed')}>\n            Completed\n          </button>\n        </div>\n      </div>\n    </TransitionGroup>\n  );\n}\n","import './App.scss';\nimport AddToDo from './components/AddToDo';\nimport React, { useState } from 'react';\nimport TodoList from './components/TodoList';\nimport { v4 as uuid } from 'uuid';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [displayNight, setDisplay] = useState(false);\n  // const [todosToDisplay, setTodosToDisplay] = useState([]);\n\n  const changeImage = () => {\n    setDisplay((oldDisplay) => !oldDisplay);\n  };\n\n  const markAsCompleted = (id) => {\n    setTodos((prevTodos) =>\n      prevTodos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n          return todo;\n        } else {\n          return todo;\n        }\n      })\n    );\n  };\n\n  const addTodoItem = (name) => {\n    setTodos((prevTodos) => [\n      ...prevTodos,\n      {\n        id: uuid(),\n        name: name,\n        completed: false,\n      },\n    ]);\n  };\n\n  const clearCompleted = () => {\n    let newArrayWithCompletedItems = todos.filter(\n      (todo) => todo.completed === false\n    );\n    setTodos(newArrayWithCompletedItems);\n  };\n\n  const removeTodoItem = (id) => {\n    setTodos((items) => items.filter((item) => item.id !== id));\n  };\n\n  //This section will change the classes based on whether the theme is light or dark\n  const backgroundColor = displayNight\n    ? 'App App-dark-theme-background'\n    : 'App';\n\n  return (\n    <div className={backgroundColor}>\n      <div className='image-container'>\n        {!displayNight ? (\n          <picture>\n            {' '}\n            <source\n              srcSet={`${process.env.PUBLIC_URL}/images/bg-mobile-light.jpg`}\n              media={'(max-width: 768px)'}></source>\n            <img\n              src={`${process.env.PUBLIC_URL}/images/bg-desktop-light.jpg`}\n              alt=''\n            />\n          </picture>\n        ) : (\n          <picture>\n            {' '}\n            <source\n              srcset={`${process.env.PUBLIC_URL}/images/bg-mobile-dark.jpg`}\n              media={'(max-width: 768px)'}></source>\n            <img\n              src={`${process.env.PUBLIC_URL}/images/bg-desktop-dark.jpg`}\n              alt=''\n            />\n          </picture>\n        )}\n      </div>\n\n      <div className='main-todo-container'>\n        <div className='todo-title-and-btn'>\n          <h1>TODO</h1>\n          <button onClick={changeImage}>\n            <svg xmlns='http://www.w3.org/2000/svg' width='26' height='26'>\n              <path\n                fill='#FFF'\n                fillRule='evenodd'\n                d='M13 0c.81 0 1.603.074 2.373.216C10.593 1.199 7 5.43 7 10.5 7 16.299 11.701 21 17.5 21c2.996 0 5.7-1.255 7.613-3.268C23.22 22.572 18.51 26 13 26 5.82 26 0 20.18 0 13S5.82 0 13 0z'\n              />\n            </svg>\n          </button>\n        </div>\n        <AddToDo addToDo={addTodoItem} />\n        <TodoList\n          clearComplete={clearCompleted}\n          markCompleted={markAsCompleted}\n          todos={todos}\n          removeToDo={removeTodoItem}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}